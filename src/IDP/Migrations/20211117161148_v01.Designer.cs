// <auto-generated />
using System;
using IDP.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IDP.Migrations
{
    [DbContext(typeof(ApplicationIdentityDbContext))]
    [Migration("20211117161148_v01")]
    partial class v01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IDP.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "607302ac-6283-4ace-a8e2-cb324a00111d",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("0210b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "9c5afc6c-4361-4348-a4e7-dabd4056fb7e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("0310b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "865f255e-0aef-4168-a7de-e6e86e75b563",
                            Name = "Root",
                            NormalizedName = "ROOT"
                        },
                        new
                        {
                            Id = new Guid("0410b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "91ba73c1-3c13-4aaf-9b15-f64abd2578c3",
                            Name = "Spare1",
                            NormalizedName = "SPARE1"
                        },
                        new
                        {
                            Id = new Guid("0510b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "0995f152-34ae-4c9f-b14b-1b603a48db26",
                            Name = "Spare2",
                            NormalizedName = "SPARE2"
                        },
                        new
                        {
                            Id = new Guid("0610b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "31b9dfb7-83bb-4092-9561-1cc956060523",
                            Name = "Masters_Degree_In_Forestry",
                            NormalizedName = "Masters_Degree_In_Forestry"
                        },
                        new
                        {
                            Id = new Guid("0710b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "1816db76-ddd2-4cb1-94ac-de769485e31a",
                            Name = "Masters_Degree_In_Forestry",
                            NormalizedName = "Masters_Degree_In_Mining"
                        });
                });

            modelBuilder.Entity("IDP.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a817e67f-ee13-4776-9a30-3c0cb00ac316",
                            Email = "ADMIN@ADMIN.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.com",
                            NormalizedUserName = "ADMIN@ADMIN.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHboeogtYYQcixrU8aQ9Qai2jXOEThfvJESaeQTRnhpwAYWaMR1/rXAH/yRSdhteEg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ADMIN@ADMIN.com"
                        },
                        new
                        {
                            Id = new Guid("2113179f-7837-473a-a4d5-a5571b43e6a6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9332437c-ff60-4dd7-b1c7-6ba94b828e9c",
                            Email = "ROOT@ROOT.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROOT@ROOT.com",
                            NormalizedUserName = "ROOT@ROOT.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBuAxQP909NQfAIWCI8+EklwPhgqPRMiqPywTUyW8PzPZ8BRSXkazjTunnJOXLMlDA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ROOT@ROOT.com"
                        },
                        new
                        {
                            Id = new Guid("223f3002-7e53-441e-8b76-f6280be284aa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54d8f34a-2ef3-44ff-b84c-3369aa3ad2e8",
                            Email = "USER@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.com",
                            NormalizedUserName = "USER@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECAoAom7liMz1GodY62fJFp/PEhCy2yprMjFHbaMRGOheDIR0Qdb9TptJCSyH5A2aQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "USER@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2398f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6c4d505-cc63-49ad-92e6-8fb1ee44966f",
                            Email = "FRIEND1@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND1@USER.com",
                            NormalizedUserName = "FRIEND1@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFqNc2wFYmYyJkSXwBzvNjvnsDiYvPh9PXoMlxFBKfZ1Ruzz0jeowZNJ4fFcI7qLEw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "FRIEND1@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2498f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c1e0c39-34da-4d04-aabd-3350dc8ed070",
                            Email = "FRIEND2@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND2@USER.com",
                            NormalizedUserName = "FRIEND2@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEG8i/Wy/fGiI3umVsajF4BZ6vnAesYtWrmjM42Kf7XO/M+7kKF3jjN6zT6SJmm7dFQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "FRIEND2@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2598f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "681a377a-b22a-42b4-b7ab-4e0b7f396c39",
                            Email = "FRIEND3@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND3@USER.com",
                            NormalizedUserName = "FRIEND3@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8TX6FrmoIxdCZUy5e3Gqes53spsBNrgWU4m6RMZbGx67YUsvTN7UjnZMWt2+EqnA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "FRIEND3@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2698f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af4f48d4-37bf-424b-9432-1ed30be23d32",
                            Email = "FRIEND4@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND4@USER.com",
                            NormalizedUserName = "FRIEND4@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJlF0DwmN5Apm/y9RnQ57mgzZfgRUTdSdjybdTcyUEpDEBTNU+7PnthCCTeFhWpfgg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "FRIEND4@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2798f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2534cd7f-f63a-408f-8d9b-7d0784ae85bf",
                            Email = "FRIEND5@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND5@USER.com",
                            NormalizedUserName = "FRIEND5@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPsIDhvaU3ISUDKSCMvsTXf0vHzGvMCW+YC+HM2eZneQ9LFAEbCJw1Ba0RPr36USvQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "FRIEND5@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2898f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ab19b5b-0726-4452-904e-a2861771f4f1",
                            Email = "FRIEND6@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND6@USER.com",
                            NormalizedUserName = "FRIEND6@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPf5e3VoeRV+HYZVFFBwDLPP8OPdQ/mPjQTk/TWfnEc/bekyaTRJarzS5ocVOLFaZQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "FRIEND6@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2998f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "767de5f5-66c7-4a4e-82ac-3dd8c7f01edf",
                            Email = "FRIEND7@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND7@USER.com",
                            NormalizedUserName = "FRIEND7@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+8qS9gKDqrlSRCQDiDWjnvsAdBpBa7k/YGb4B6R+P8bbxhZxcankoTRIVlq3s3Ng==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "FRIEND7@USER.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("20788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            RoleId = new Guid("0210b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("20788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2113179f-7837-473a-a4d5-a5571b43e6a6"),
                            RoleId = new Guid("0310b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2113179f-7837-473a-a4d5-a5571b43e6a6"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("223f3002-7e53-441e-8b76-f6280be284aa"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2398f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2498f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2598f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2698f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2798f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2898f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2998f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDP.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
