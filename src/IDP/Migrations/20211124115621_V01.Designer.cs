// <auto-generated />
using System;
using IDP.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IDP.Migrations
{
    [DbContext(typeof(ApplicationIdentityDbContext))]
    [Migration("20211124115621_V01")]
    partial class V01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IDP.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "a65c39f2-fea0-44e2-8352-95b288027d94",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("0210b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "ef0a0978-7de1-459e-8002-bec95ca0e637",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("0310b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "ed767924-6add-4529-b663-a79bb9fcc4e9",
                            Name = "Root",
                            NormalizedName = "ROOT"
                        },
                        new
                        {
                            Id = new Guid("0410b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "ace8160a-0eb2-4e27-81f9-bc6fb32628b4",
                            Name = "Spare1",
                            NormalizedName = "SPARE1"
                        },
                        new
                        {
                            Id = new Guid("0510b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "677cc527-436c-42d0-af16-08cb4b2f3d24",
                            Name = "Spare2",
                            NormalizedName = "SPARE2"
                        },
                        new
                        {
                            Id = new Guid("0610b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "e8ee73b8-dbe1-4811-815d-d938732255bd",
                            Name = "Masters_Degree_In_Forestry",
                            NormalizedName = "Masters_Degree_In_Forestry"
                        },
                        new
                        {
                            Id = new Guid("0710b1f9-8e0b-4a4f-a52e-dd20c3d4a539"),
                            ConcurrencyStamp = "771173f7-ed57-49b8-8b63-7e9a9b81ff84",
                            Name = "Masters_Degree_In_Forestry",
                            NormalizedName = "Masters_Degree_In_Mining"
                        });
                });

            modelBuilder.Entity("IDP.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d9e9daa-946c-4d17-a115-997b3b8b89ea",
                            Email = "ADMIN@ADMIN.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.com",
                            NormalizedUserName = "ADMIN@ADMIN.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEEMN8ieJRgbLJ303e+jnjsKxkKw5z7x5xLnJQgciWGZernXyMsZeuwJrCBDQ1XSHNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "471ee140-1f96-4869-8449-0bb25425ba6b",
                            TwoFactorEnabled = false,
                            UserName = "ADMIN@ADMIN.com"
                        },
                        new
                        {
                            Id = new Guid("2113179f-7837-473a-a4d5-a5571b43e6a6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6355465b-628a-4c0b-b5df-1485b29fbfd1",
                            Email = "ROOT@ROOT.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROOT@ROOT.com",
                            NormalizedUserName = "ROOT@ROOT.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEG12pDD6TOFEzs9ZP829QRzTqEAQph6J15NpkhtJk89zh6IqDLwcVCskDjht24+rRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba4a67d4-142f-4009-abdf-60a80e601bc1",
                            TwoFactorEnabled = false,
                            UserName = "ROOT@ROOT.com"
                        },
                        new
                        {
                            Id = new Guid("223f3002-7e53-441e-8b76-f6280be284aa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f79d491-0173-4099-9bdf-3b1626998a03",
                            Email = "USER@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.com",
                            NormalizedUserName = "USER@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEItEAlTjfaC9DXV6USP4uX/C7qjjDZbnCyoYRpu+XhMfKhct6jT5x+Cg3msLw53TKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39483c47-0ad3-4b90-82d8-c8a63e418410",
                            TwoFactorEnabled = false,
                            UserName = "USER@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2398f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6576aa7-01b8-4bb8-8317-8b9bf1bec1c3",
                            Email = "FRIEND1@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND1@USER.com",
                            NormalizedUserName = "FRIEND1@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFkUZBt87fuRxrinkBQnuxQZ9F4UNdrFjyuoXsEVQitQj15uZ2btdwSfmyDNU39l6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2951f404-84b3-41ab-8e4e-ba854636ca56",
                            TwoFactorEnabled = false,
                            UserName = "FRIEND1@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2498f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a518b260-058b-490a-b62b-b6b62acde2b5",
                            Email = "FRIEND2@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND2@USER.com",
                            NormalizedUserName = "FRIEND2@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPpsj74KIv0Rvv4Ha7uLlARPlKf83PoRzSEWSliVW2BcqHIQZ6ShsN40lAhlXK5jDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ade158aa-cbdb-4382-ae97-f05abfee1fce",
                            TwoFactorEnabled = false,
                            UserName = "FRIEND2@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2598f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fb82e55-ee2f-4e8b-b9bb-29070993a913",
                            Email = "FRIEND3@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND3@USER.com",
                            NormalizedUserName = "FRIEND3@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAXWyXQ3gjTw+4ZLW3hju2qJ3dGyLPKhWJJ/OGFZZV9shUrJu946JW/1N1ldn7fOiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "055d80af-60df-4f25-a2ef-cefefabd54b4",
                            TwoFactorEnabled = false,
                            UserName = "FRIEND3@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2698f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e7c384d-f598-4d1e-84da-4b7acabf5e95",
                            Email = "FRIEND4@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND4@USER.com",
                            NormalizedUserName = "FRIEND4@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUD1nfuXvgtL8RvAiHpr8Qb4CplBHOk/gi+NIx+pVDc869TAmyAmVL3dViQaq7Ksw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a268d7d3-bb09-4e06-ad81-a8b258ca2f1b",
                            TwoFactorEnabled = false,
                            UserName = "FRIEND4@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2798f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cb7f339-06c9-4658-9e45-7f0fce3ab2bc",
                            Email = "FRIEND5@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND5@USER.com",
                            NormalizedUserName = "FRIEND5@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFAOI+4Fq61VfEmc89mkktO0ulvBnPT7decZs6S5jADCpEepIwjX/NCYnrwwn2H+ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5966f0ff-ada0-4daa-94af-07cdc125a7b6",
                            TwoFactorEnabled = false,
                            UserName = "FRIEND5@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2898f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "171ee182-f470-4e8f-99fc-b2e6690eb201",
                            Email = "FRIEND6@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND6@USER.com",
                            NormalizedUserName = "FRIEND6@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEEEaJslF0J7JkiaTeZL509GqJ47KRk8jTiyXLXdEwE0mUgg+CF4QyL9GrYTVbsTm7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4148cb9-2a78-41d6-8569-593e477ac520",
                            TwoFactorEnabled = false,
                            UserName = "FRIEND6@USER.com"
                        },
                        new
                        {
                            Id = new Guid("2998f549-e790-4e9f-aa16-18c2292a2ee9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ce941b1-1312-4596-9544-01474fbe57e6",
                            Email = "FRIEND7@USER.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEND7@USER.com",
                            NormalizedUserName = "FRIEND7@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEF5pRTLQtbrtP5KTsJdO3gzzmOfOP+UalfbMxzBl4nFS/zAxJxW43LQRvZWoRPoT/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01b30284-7fa3-4946-96ce-2f6139c0cbc1",
                            TwoFactorEnabled = false,
                            UserName = "FRIEND7@USER.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("20788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            RoleId = new Guid("0210b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("20788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2113179f-7837-473a-a4d5-a5571b43e6a6"),
                            RoleId = new Guid("0310b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2113179f-7837-473a-a4d5-a5571b43e6a6"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("223f3002-7e53-441e-8b76-f6280be284aa"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2398f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2498f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2598f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2698f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2798f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2898f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        },
                        new
                        {
                            UserId = new Guid("2998f549-e790-4e9f-aa16-18c2292a2ee9"),
                            RoleId = new Guid("0110b1f9-8e0b-4a4f-a52e-dd20c3d4a539")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDP.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("IDP.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
