
            //Only thread: Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-GB");
            //Below whole app.
            //app.UseRequestLocalization(new RequestLocalizationOptions
            //{
            //    DefaultRequestCulture = new RequestCulture(new CultureInfo("en-gb")),
            //    SupportedCultures = new List<CultureInfo>
            //    {
            //        new CultureInfo("en-gb")
            //    },
            //    SupportedUICultures = new List<CultureInfo>
            //    {
            //        new CultureInfo("en-gb")
            //    }
            //});







<div>
    <a asp-controller="Auth" asp-action="Register"
       asp-route-returnUrl="@Model.ReturnUrl">Register</a>
</div>


<form asp-controller="Auth" asp-action="Register" method="post">
    <input type="hidden" asp-for="ReturnUrl" />
    <div class="mb-3">
        <label>Username</label>
        <input asp-for="Username" />
        <span asp-validation-for="Username"></span>
    </div>
    <div>
        <label>Password</label>
        <input asp-for="Password" />
        <span asp-validation-for="Password"></span>
    </div>
    <div>
        <label>Password</label>
        <input asp-for="ConfirmPassword" />
        <span asp-validation-for="ConfirmPassword"></span>
    </div>
    <div>
        <button type="submit">Sign Up</button>
    </div>
</form>
<div>
    <a asp-route-returnUrl="@Model.ReturnUrl"></a>
</div>

        //        protected override void OnModelCreating(ModelBuilder modelBuilder)



@using (@Html.BeginForm("WriteRolesToUser", "DetailedUser", FormMethod.Post))
{

    @Html.HiddenFor(m => m.UserName)

    @for (int i = 0; i < Model.UsersRoles.Count; i++)
    {
        @Html.CheckBoxFor(m => m.UsersRoles[i].UserHasThisRole)
        @Html.DisplayFor(m => m.UsersRoles[i].RoleName)
        <br>
    }

    <button type="submit">Save Changes</button>
}



<form asp-controller="DetailedUser" asp-action="WriteRolesToUser" method="post">
    @for (int i = 0; i < Model.UsersRoles.Count; i++)
    {
        @Html.HiddenFor(m => m.UsersRoles[i].RoleName)
        @Html.CheckBoxFor(m => m.UsersRoles[i].UserHasThisRole)
        @Html.DisplayFor(m => m.UsersRoles[i].RoleName)
        <br>
    }
    <button type="submit">Save Changes</button>
</form>





        [HttpPost]
        public async Task<IActionResult> AddUser(UsersViewModel usersViewModel)
        {
            usersViewModel.ListOfUsers = JsonConvert.DeserializeObject<List<UserModel>>(usersViewModel.jsonSerializeStringPlaceholder1);
            string guid = Guid.NewGuid().ToString();
            ApplicationUser applicationUser = new ApplicationUser
            {
                Id = guid,
                UserName = usersViewModel.NewUserName.Normalize(),
                NormalizedUserName = usersViewModel.NewUserName.Normalize(),
            };
            var result = await _userManager.CreateAsync(applicationUser);
            usersViewModel.ListOfUsers.Add(new UserModel { Id = applicationUser.Id, Name = applicationUser.UserName });
            if (result.Succeeded)
            {
                return View("Users", usersViewModel);
            }
            else
            {
                return View("Users", usersViewModel);
            }
        }




